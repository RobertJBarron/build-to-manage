import os
from flask import Flask, request
import logging


appname = 'service3'

## Application logic to grab or generate transactionID
##
## If a log entry is initiated as part of a REST call we should include determine the transactionID and include that in any log entries.
## The preferred value to use is transactionID as this is passed from other microservices.
## If this is the first link in the chain use global-transaction-id which is generated by the DataPower gateway in Bluemix.
## If this is not available fall back to vcap_request_id which is generated by the Cloud Foundry GoRouter
## 
## If the log entry is not initiated as part of a REST call we will insert a value of NoREST to indicate this
def get_transactionID(self):
  if request:
    if 'transactionID' in request.headers:
      return str(request.headers['transactionID'])
    
    elif 'X-Global-Transaction-Id' in request.headers:
      return str(request.headers['X-Global-Transaction-Id'])
    
    else:
      return str(request.headers['X-Vcap-Request-Id'])

  else:
    # We didn't come in here via a REST request. 
    return str('NoREST')  

class TransactionFilter(logging.Filter):
  get_transactionID = get_transactionID
  
  def filter(self, record):
      record.transactionID = TransactionFilter.get_transactionID(self)
      return True

## Setup the logger
logger = logging.getLogger(__name__)
logger.addFilter(TransactionFilter())
syslog = logging.StreamHandler()
formatter = logging.Formatter('%(levelname)s [%(appname)s,%(transactionID)s] : %(message)s')
syslog.setFormatter(formatter)
logger.setLevel(logging.INFO)
logger.addHandler(syslog)

# Add application name
logger = logging.LoggerAdapter(logger, {'appname': appname})

logger.info('Started %s ' % appname)


# Setup Flask
port = int(os.getenv('VCAP_APP_PORT', 8080))
app = Flask(__name__)


@app.route("/service")
def service():
  logger.info('Got a request. Returning the answer you want')
  return 'The answer you want'
  

app.run(host='0.0.0.0', port=port)
